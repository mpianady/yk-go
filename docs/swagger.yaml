basePath: /
definitions:
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.LogoutRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  auth.LogoutResponse:
    properties:
      message:
        example: Logout successful
        type: string
    type: object
  auth.RefreshRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  auth.RefreshResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR...
        type: string
    type: object
  auth.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      password:
        example: secret123
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  auth.RegisterResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR...
        type: string
      refresh_token:
        example: dGhpc2lzYXJlZnJlc2h0b2tlbg==
        type: string
    type: object
  auth.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_login_at:
        type: string
      last_name:
        type: string
      role:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  post.CategoryRequest:
    properties:
      description:
        type: string
      name:
        type: string
      parent_id:
        type: integer
    required:
    - description
    - name
    type: object
  post.CategoryResponse:
    properties:
      children:
        items:
          $ref: '#/definitions/post.CategoryResponse'
        type: array
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      parentId:
        type: integer
      updatedAt:
        type: string
    type: object
  post.CommentRequest:
    properties:
      content:
        type: string
      parent_id:
        type: integer
      post_id:
        type: integer
      status:
        type: string
      user_id:
        type: integer
    required:
    - content
    - post_id
    - user_id
    type: object
  post.CommentResponse:
    properties:
      author:
        type: string
      children:
        items:
          $ref: '#/definitions/post.CommentResponse'
        type: array
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      post_id:
        type: integer
      status:
        type: string
      user_id:
        type: integer
    type: object
  post.CommentUpdateRequest:
    properties:
      content:
        type: string
      status:
        type: string
    required:
    - content
    - status
    type: object
  post.PostRequest:
    properties:
      category_ids:
        items:
          type: integer
        type: array
      content:
        type: string
      excerpt:
        type: string
      title:
        type: string
    required:
    - content
    - title
    type: object
  post.PostResponse:
    properties:
      category_ids:
        items:
          type: integer
        type: array
      content:
        type: string
      created_at:
        type: string
      excerpt:
        type: string
      id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
    type: object
  utils.ErrorResponse:
    properties:
      errors:
        items:
          additionalProperties:
            type: string
          type: object
        type: array
    type: object
  utils.PaginatedResponse-post_CategoryResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/post.CategoryResponse'
        type: array
      empty:
        type: boolean
      first:
        type: boolean
      hasNext:
        type: boolean
      hasPrevious:
        type: boolean
      last:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      totalPages:
        type: integer
    type: object
  utils.PaginatedResponse-post_CommentResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/post.CommentResponse'
        type: array
      empty:
        type: boolean
      first:
        type: boolean
      hasNext:
        type: boolean
      hasPrevious:
        type: boolean
      last:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      totalPages:
        type: integer
    type: object
  utils.PaginatedResponse-post_PostResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/post.PostResponse'
        type: array
      empty:
        type: boolean
      first:
        type: boolean
      hasNext:
        type: boolean
      hasPrevious:
        type: boolean
      last:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      totalPages:
        type: integer
    type: object
  utils.ValidationErrorResponse:
    properties:
      errors:
        items:
          additionalProperties:
            type: string
          type: object
        type: array
    type: object
host: https://api.go.tiana-zo.site
info:
  contact: {}
  description: A blog API built with Gin framework providing features like post-categories,
    blog posts, comments, and user authentication including login, registration, and
    refresh token functionality.
  title: Go Blog API
  version: "1.0"
paths:
  /v1/categories:
    get:
      description: Retrieve a paginated list of blog post categories
      parameters:
      - description: Page number (default is 1)
        in: query
        name: page
        type: integer
      - description: Items per page (default is 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.PaginatedResponse-post_CategoryResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      tags:
      - Categories
    post:
      consumes:
      - application/json
      description: Create a new blog post category
      parameters:
      - description: Category creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/post.CategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/post.CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ValidationErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      tags:
      - Categories
  /v1/categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a category and handle its children (recursively or by reassignment)
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Delete children recursively
        in: query
        name: recursive
        type: boolean
      - description: ID of category to reassign children to
        in: query
        name: reassign_to
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      tags:
      - Categories
    get:
      description: Retrieve a specific category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/post.CategoryResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      tags:
      - Categories
    put:
      consumes:
      - application/json
      description: Update an existing category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/post.CategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/post.CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      tags:
      - Categories
  /v1/categories/tree:
    get:
      description: Retrieve hierarchical tree structure of all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/post.CategoryResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      tags:
      - Categories
  /v1/comments:
    post:
      consumes:
      - application/json
      description: Create a new comment
      parameters:
      - description: Comment data
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/post.CommentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/post.CommentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      tags:
      - Comments
  /v1/comments/{id}:
    delete:
      description: Delete a comment
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      tags:
      - Comments
    put:
      consumes:
      - application/json
      description: Update an existing comment
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated comment data
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/post.CommentUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/post.CommentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      tags:
      - Comments
  /v1/comments/all:
    get:
      description: Get list of all comments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/post.CommentResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      tags:
      - Comments
  /v1/comments/post/{id}:
    get:
      description: Get paginated comments for a specific post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.PaginatedResponse-post_CommentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      tags:
      - Comments
  /v1/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return access and refresh tokens
      parameters:
      - description: User login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ValidationErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Login user
      tags:
      - Auth
  /v1/logout:
    post:
      consumes:
      - application/json
      description: Invalidate refresh token and logout user
      parameters:
      - description: Logout request with refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.LogoutResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ValidationErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - Auth
  /v1/me:
    get:
      consumes:
      - application/json
      description: Retrieve detailed information about the currently authenticated
        user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user information
      tags:
      - Auth
  /v1/posts:
    get:
      description: Retrieve a paginated list of blog posts with optional category
        filtering
      parameters:
      - description: Page number (default is 1)
        in: query
        name: page
        type: integer
      - description: Items per page (default is 10)
        in: query
        name: limit
        type: integer
      - description: Comma-separated list of category IDs to filter by
        in: query
        name: category_ids
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.PaginatedResponse-post_PostResponse'
        "400":
          description: Invalid category_ids
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Page not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      tags:
      - Posts
    post:
      consumes:
      - application/json
      description: Create a new blog post with optional category assignments
      parameters:
      - description: Post creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/post.PostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/post.PostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ValidationErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      tags:
      - Posts
  /v1/posts/{id}:
    delete:
      description: Delete a post by its ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Post deleted successfully
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      tags:
      - Posts
    get:
      description: Retrieve a specific post by its ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/post.PostResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      tags:
      - Posts
    put:
      consumes:
      - application/json
      description: Update an existing post by its ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Post update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/post.PostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/post.PostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ValidationErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      tags:
      - Posts
  /v1/refresh-token:
    post:
      consumes:
      - application/json
      description: Generate new access token using refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.RefreshResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ValidationErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Refresh access token
      tags:
      - Auth
  /v1/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User registration payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ValidationErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Register a new user
      tags:
      - Auth
swagger: "2.0"
